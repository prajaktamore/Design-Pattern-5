package reflection.serDeser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;

import reflection.interfaces.ISerialize;
import reflection.util.MyAllTypesFirst;
import reflection.util.MyAllTypesSecond;
import reflection.utilClasses.CompareTwoClasses;
import reflection.utilClasses.Debug;
import reflection.utilClasses.FileReaderClass;

/**
 * @author Prajakta Serialize class that Serialize data and generate
 *         MyAllTypesCopy.txt
 */
public class Serialize implements ISerialize, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Serialize COnstructor
	 */
	public Serialize() {
		if (Debug.getDEBUG_VALUE() == 4) {
			CompareTwoClasses.strbuild.append("Constructor is called :: "
					+ this.getClass().getName());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see reflection.interfaces.ISerialize#serializeObject()
	 */
	@Override
	public void serializeObject() throws IOException {
		try {
			FileWriter file = new FileWriter(
					FileReaderClass.getOutputFileName());
			PrintWriter pw = new PrintWriter(file);
			try {
				FileReaderClass.setFileReader(new FileReader(FileReaderClass
						.getInputFileName()));
			} catch (FileNotFoundException e) {
				System.err.println("Exception Occured :: " + e.getMessage());
			}
			FileReaderClass.setBr(new BufferedReader(FileReaderClass
					.getFileReader()));

			StringBuilder buildString = new StringBuilder();
			String fileData = null;
			String delimiter = null;
			MyAllTypesSecond classObject = null;
			int i = 0;
			char c = ' ';
			float f = 0.0f;
			double d = 0d;
			String str1 = null;
			short s= 0;	
			long l =0l;
			for (Object iterable_element : SerializeTypes.getMyAllTypesFinal()) {
				String str = iterable_element.getClass().getCanonicalName();
					
				if(iterable_element instanceof MyAllTypesFirst){
					MyAllTypesFirst first = (MyAllTypesFirst) iterable_element;
					i = first.getMyInt();
					c = first.getMyChar();
					str1 = first.getMyString();
							d = first.getMyDouble();
							l= first.getMyLong();
				}else if(iterable_element instanceof MyAllTypesSecond){
					MyAllTypesSecond second = (MyAllTypesSecond) iterable_element;
					i = second.getMyIntS();
					c = second.getMyCharS();
					str1 = second.getMyStringS();
							f = second.getMyFloatS();
							s= second.getMyShortS();
				}
				while ((fileData = FileReaderClass.getBr().readLine()) != null) {

					if (fileData.contains("<DPSerialization>")) {
						pw.println(fileData);
					}
					if (fileData.contains("<complexType xsi:type=\"")) {
						pw.println(fileData.replaceAll("\".*?\"", "\""
								+ str
								+ "\""));
					}
					
							if (fileData.contains("xsd:string")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ str1 + "<"));
							} else if (fileData.contains("xsd:int")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ i
										+ "<"));
							} else if (fileData.contains("xsd:float")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ f
										+ "<"));
							} else if (fileData.contains("xsd:short")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ s
										+ "<"));
							} else if (fileData.contains("xsd:char")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ c
										+ "<"));
							}else if (fileData.contains("xsd:long")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ l
										+ "<"));
							} else if (fileData.contains("xsd:double")) {
								pw.println(fileData.replaceAll(">.*?<", ">"
										+ d
										+ "<"));
							}
						
					if (fileData.contains("</complexType>")) {
						pw.println(fileData);
					}
					if (fileData.contains("</DPSerialization>")) {
						pw.println(fileData);
						second
					}
				}
			}

			pw.close();
			file.close();

		} catch (IOException i) {
			System.err.println("Exception Occured :: " + i.getMessage());
			System.exit(0);
		} catch (Exception e) {
			System.err.println("Exception Occured :: " + e.getMessage());
			System.exit(0);
		} finally {

		}
	}

}
