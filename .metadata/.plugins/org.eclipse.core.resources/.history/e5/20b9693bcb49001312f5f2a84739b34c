package reflection.utilClasses;


/**
 * @author PrajaktaMore Debugger class that maintains logging information
 */
public class Debug {
	public Debug() {
		if (Debug.getDEBUG_VALUE() == 4) {
			CompareTwoClasses.strbuild.append("Constructor is called :: "
					+ this.getClass().getName());
		}
	}

	/**
	 * Integer Variable DEBUG_VALUE used for Logger
	 */
	private static int DEBUG_VALUE;

	// accessor and mutator for DEBUG_VALUE

	/**
	 * @return the dEBUG_VALUE
	 */
	public static int getDEBUG_VALUE() {
		return DEBUG_VALUE;
	}

	/**
	 * @param dEBUG_VALUE
	 *            the dEBUG_VALUE to set
	 */
	public static void setDEBUG_VALUE(int dEBUG_VALUE, String className) {
		DEBUG_VALUE = dEBUG_VALUE;
		if (DEBUG_VALUE == 4) {
			CompareTwoClasses.strbuild.append(className
					+ "Constructor is Called");
		} else if (DEBUG_VALUE == 3) {
			CompareTwoClasses.strbuild.append(className
					+ "Deserialize method is called");
		} else if (DEBUG_VALUE == 2) {
			CompareTwoClasses.strbuild
					.append("Serialize to the Results data structure");
		} else if (DEBUG_VALUE == 1) {
			CompareTwoClasses.strbuild
					.append("Debug Value Selected is No output printed");
			CompareTwoClasses c = new CompareTwoClasses();
			System.out.println(c.toString());
			System.exit(0);
		} else if (DEBUG_VALUE == 0) {
			CompareTwoClasses.strbuild
					.append("Selected to print Compare output");
		}
	}

	@Override
	public String toString() {
		StringBuilder result = new StringBuilder();
		String NEW_LINE = System.getProperty("line.separator");

		result.append("" + NEW_LINE);

		return result.toString();
	}

}