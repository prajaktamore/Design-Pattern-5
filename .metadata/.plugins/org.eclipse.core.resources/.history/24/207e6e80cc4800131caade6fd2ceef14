package reflection.util;

public class MyAllTypesSecond {
	private int myIntS;
	private String myStringS;
	private float myFloatS;
	private short myShortS;
	private char myCharS;
	/**
	 * @return the myIntS
	 */
	public int getMyIntS() {
		return myIntS;
	}
	/**
	 * @param myIntS the myIntS to set
	 */
	public void setMyIntS(int myIntS) {
		this.myIntS = myIntS;
	}
	/**
	 * @return the myStringS
	 */
	public String getMyStringS() {
		return myStringS;
	}
	/**
	 * @param myStringS the myStringS to set
	 */
	public void setMyStringS(String myStringS) {
		this.myStringS = myStringS;
	}
	/**
	 * @return the myFloatS
	 */
	public float getMyFloatS() {
		return myFloatS;
	}
	/**
	 * @param myFloatS the myFloatS to set
	 */
	public void setMyFloatS(float myFloatS) {
		this.myFloatS = myFloatS;
	}
	/**
	 * @return the myShortS
	 */
	public short getMyShortS() {
		return myShortS;
	}
	/**
	 * @param myShortS the myShortS to set
	 */
	public void setMyShortS(short myShortS) {
		this.myShortS = myShortS;
	}
	/**
	 * @return the myCharS
	 */
	public char getMyCharS() {
		return myCharS;
	}
	/**
	 * @param myCharS the myCharS to set
	 */
	public void setMyCharS(char myCharS) {
		this.myCharS = myCharS;
	}
	@Override
	  public boolean equals(Object obj) {           
	        if (this == obj)
	            return true;
	        if (obj == null)
	            return false;
	        if (getClass() != obj.getClass())
	            return false;
	        MyAllTypesSecond other = (MyAllTypesSecond) obj;
	        if (myIntS != other.myIntS){
	            return false;
	        } else if (!myStringS.equals(other.myStringS))
	        { return false;
	        }else if (myCharS != other.myCharS){
              return false;
      	}else if (myShortS != other.myShortS ) {
      		return false;
      	}else if (myFloatS != other.myFloatS){
              return false;
      }
	        return true;}
	
	@Override
	public int hashCode() {
		final int prime = 31;
      int result = 1;
      result = prime * result
              + ((myStringS == null) ? 0 : myStringS.hashCode());
      result = prime * result + myIntS;
      result = prime * result
              + ((myCharS == ' ') ? 0 : myCharS);
      result = (int) (prime * result + myShortS);
      result = (int) (prime * result + myFloatS);
      return result;
	}
}
