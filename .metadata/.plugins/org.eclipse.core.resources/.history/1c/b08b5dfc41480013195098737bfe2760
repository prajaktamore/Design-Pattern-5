package reflection.utilClasses;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import reflection.interfaces.IDeSerialize;
import reflection.serDeser.DeSerialize;

public class Parse {
	/**
	 * @throws IOException
	 */
	public void readFile() throws IOException {
		try {
			FileReaderClass.setFileReader(new FileReader(FileReaderClass.getInputFileName()));
		} catch (FileNotFoundException e) {
			System.err.println("Exception Occured :: "+e.getMessage());
		}
		FileReaderClass.setBr(new BufferedReader(FileReaderClass.getFileReader()));
		
		StringBuilder buildString = new StringBuilder();
		String fileData = null;
		HashMap<Integer, String> hashMap = new HashMap<Integer, String>();
		while ((fileData = FileReaderClass.getBr().readLine()) != null) {
			if(!fileData.trim().contains("DPSerialization")){
			if(fileData.trim().contains("<complexType")){
				Matcher matcher = Pattern.compile("^.*?" + "<" + "(.*)" + "xsi:type" + ".*$").matcher(fileData);

                if (matcher.matches()) {
                    System.out.println("I found the text: " + matcher.group(1));
                   
                    Matcher matcher1 = Pattern.compile("^.*?" + "\"" + "(.*)" + "\"" + ".*$").matcher(fileData);
                    if (matcher1.matches())
                    	hashMap.put(0,  matcher1.group(1));
                }
		    	
			}else(fileData.trim().contains("complexType")){
				 //String testHtml = "xx <tag a =\"b\" c=  \'d\' e=f> contentssss </tag> zz";
			     Pattern tagPattern = Pattern.compile("<(\\S+?)(.*?)>(.*?)</\\1>");
			     Pattern attValueDoubleQuoteOnly = Pattern.compile("(\\w+)=\"(.*?)\"");
			     Pattern attValueAll = Pattern.compile("([\\w:\\-]+)(\\s*=\\s*(\"(.*?)\"|'(.*?)'|([^ ]*))|(\\s+|\\z))");
			     Matcher m = tagPattern.matcher(fileData.trim());
			     boolean tagFound = m.find(); // true
			     String tagOnly = m.group(0);// <tag a ="b" c= 'd' e=f> contentssss </tag>
			     String tagname = m.group(1);// tag
			     String attributes = m.group(2);// a ="b" c= 'd' e=f
			     String content = m.group(3);// contentssss
			     if(tagname.equals("myString")){
			    	hashMap.put(1,  m.group(3).trim());
			     }else if (tagname.equals("myInt")){
			    	 hashMap.put(2,  m.group(3).trim());
			     }else if (tagname.equals("myDouble")){
			    	 hashMap.put(3,  m.group(3).trim());
			     }else if (tagname.equals("myLong")){
			    	 hashMap.put(4,  m.group(3).trim());
			     }else if (tagname.equals("myChar")){
			    	 hashMap.put(5,  m.group(3).trim());
			    	 IDeSerialize deSerialize = new DeSerialize();
				     deSerialize.deSerializeMethod(hashMap);
			     }
			     System.out.println(hashMap);
			     System.out.println("Tag Name   : " + tagname);
			     System.out.println("Content    : " + content);
		     }
			}
			
		}
		
		//"<complexType+ xsi+\:\type+\=\"\reflection.util+\.[a-zA-Z]*.\">)"
				
	}
}
