package reflection.serDeser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;

import reflection.interfaces.ISerialize;
import reflection.util.MyAllTypesFirst;
import reflection.util.MyAllTypesSecond;
import reflection.utilClasses.CompareTwoClasses;
import reflection.utilClasses.Debug;
import reflection.utilClasses.FileReaderClass;

/**
 * @author Prajakta Serialize class that Serialize data and generate
 *         MyAllTypesCopy.txt
 */
public class Serialize implements ISerialize, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Serialize COnstructor
	 */
	public Serialize() {
		if (Debug.getDEBUG_VALUE() == 4) {
			CompareTwoClasses.strbuild.append("Constructor is called :: "
					+ this.getClass().getName());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see reflection.interfaces.ISerialize#serializeObject()
	 */
	@Override
	public void serializeObject() throws IOException {
		try {
			FileWriter file = new FileWriter(
					FileReaderClass.getOutputFileName());
			PrintWriter pw = new PrintWriter(file);
			try {
				FileReaderClass.setFileReader(new FileReader(FileReaderClass
						.getInputFileName()));
			} catch (FileNotFoundException e) {
				System.err.println("Exception Occured :: " + e.getMessage());
			}
			FileReaderClass.setBr(new BufferedReader(FileReaderClass
					.getFileReader()));

			StringBuilder buildString = new StringBuilder();
			String fileData = null;
			String delimiter = null;
			for (Object iterable_element : SerializeTypes.getMyAllTypesFinal()) {
				System.out.println(iterable_element.getClass()
						.getCanonicalName());
				while ((fileData = FileReaderClass.getBr().readLine()) != null) {

					if (fileData.contains("<DPSerialization>")) {
						pw.println(fileData);
					}
					if (iterable_element instanceof MyAllTypesFirst) {
						MyAllTypesFirst first = (MyAllTypesFirst) iterable_element;
						if(null != first){
						pw.println("  <myInt xsi:type=\"xsd:int\">"
								+ first.getMyInt() + "</myInt>");
						pw.println("  <myString xsi:type=\"xsd:string\">"
								+ first.getMyString() + "</myString>");
						pw.println("  <myDouble xsi:type=\"xsd:double\">"
								+ first.getMyDouble() + "</myDouble>");
						pw.println("  <myLong xsi:type=\"xsd:long\">"
								+ first.getMyLong() + "</myLong>");
						pw.println("  <myChar xsi:type=\"xsd:char\">"
								+ first.getMyChar() + "</myChar>");
						}
					} else if (iterable_element instanceof MyAllTypesSecond) {
						MyAllTypesSecond second = (MyAllTypesSecond) iterable_element;
						if(null != second){
						pw.println("  <myIntS xsi:type=\"xsd:int\">"
								+ second.getMyIntS() + "</myIntS>");
						pw.println("  <myStringS xsi:type=\"xsd:string\">"
								+ second.getMyStringS() + "</myStringS>");
						pw.println("  <myFloatS xsi:type=\"xsd:float\">"
								+ second.getMyFloatS() + "</myFloatS>");
						pw.println("  <myShortS xsi:type=\"xsd:short\">"
								+ second.getMyShortS() + "</myShortS>");
						pw.println("  <myCharS xsi:type=\"xsd:char\">"
								+ second.getMyCharS() + "</myCharS>");
						}
					}
					
					if (fileData.contains("</complexType>")) {
						pw.println(fileData);
					}
					if (fileData.contains("</DPSerialization>")) {
						pw.println(fileData);
					}
				}
			}

			pw.close();
			file.close();

		} catch (IOException i) {
			System.err.println("Exception Occured :: " + i.getMessage());
			System.exit(0);
		} catch (Exception e) {
			System.err.println("Exception Occured :: " + e.getMessage());
			System.exit(0);
		} finally {

		}
	}

}
